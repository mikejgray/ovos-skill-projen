// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.json and run \\"npx projen\\".

* text=auto eol=lf
/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/setup.py linguist-generated
/version.py linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.json and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
  merge_group: {}
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
    steps:
      - uses: amannn/action-semantic-pull-request@v5.4.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.json and run \\"npx projen\\".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/setup.py
!/version.py
.DS_Store
node_modules
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
*.manifest
*.spec
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
*.mo
*.pot
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
instance/
.webassets-cache
.scrapy
docs/_build/
.pybuilder/
target/
.ipynb_checkpoints
profile_default/
ipython_config.py
__pypackages__/
celerybeat-schedule
celerybeat.pid
*.sage.py
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.spyderproject
.spyproject
.ropeproject
/site
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/
!/.projenrc.json
",
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.json and run \\"npx projen\\".",
    "files": Array [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "setup.py",
      "version.py",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.json and run \\"npx projen\\".",
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "clobber": Object {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": Object {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": Array [
          Object {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in \\"scratch\\" branch",
          },
          Object {
            "exec": "git checkout $BRANCH",
          },
          Object {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          Object {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          Object {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          Object {
            "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
      },
      "default": Object {
        "description": "Synthesize project files",
        "env": Object {
          "FILENAME": ".projenrc.json",
        },
        "name": "default",
        "steps": Array [
          Object {
            "builtin": "run-projenrc-json",
          },
        ],
      },
      "eject": Object {
        "description": "Remove projen from the project",
        "env": Object {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": Array [
          Object {
            "spawn": "default",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
      },
    },
  },
  "README.md": "# TestPlugin

Template for an OVOS PHAL plugin.

\`\`\`python
self.bus.on(\\"mycroft.ready\\", self.on_mycroft_ready)
\`\`\`

## Credits

authorName (@githubUsername)
",
  "requirements.txt": "ovos-utils
ovos-bus-client
ovos-workshop
ovos-plugin-manager
# Your requirements here
",
  "setup.py": "#!/usr/bin/env python3
from setuptools import setup
from os import walk, path

BASEDIR = path.abspath(path.dirname(__file__))
URL = \\"TODO: Add 'repositoryUrl' to .projenrc.json and run pj\\"
plugin_CLAZZ = \\"TestPlugin\\"  # needs to match __init__.py class name
PYPI_NAME = \\"test-plugin\\"  # pip install PYPI_NAME

# below derived from github url to ensure standard plugin_id
plugin_AUTHOR, plugin_NAME = URL.split(\\".com/\\")[-1].split(\\"/\\")
plugin_PKG = plugin_NAME.lower().replace(\\"-\\", \\"_\\")
PLUGIN_ENTRY_POINT = f\\"{plugin_NAME.lower()}.{plugin_AUTHOR.lower()}={plugin_PKG}:{plugin_CLAZZ}\\"
# plugin_id=package_name:pluginClass
BASE_PATH = BASE_PATH = path.abspath(path.join(path.dirname(__file__), \\"src\\"))


def get_version():
    \\"\\"\\"Find the version of the package\\"\\"\\"
    version = None
    version_file = path.join(BASE_PATH, \\"version.py\\")
    major, minor, build, alpha = (None, None, None, None)
    with open(version_file) as f:
        for line in f:
            if \\"VERSION_MAJOR\\" in line:
                major = line.split(\\"=\\")[1].strip()
            elif \\"VERSION_MINOR\\" in line:
                minor = line.split(\\"=\\")[1].strip()
            elif \\"VERSION_BUILD\\" in line:
                build = line.split(\\"=\\")[1].strip()
            elif \\"VERSION_ALPHA\\" in line:
                alpha = line.split(\\"=\\")[1].strip()

            if (major and minor and build and alpha) or \\"# END_VERSION_BLOCK\\" in line:
                break
    version = f\\"{major}.{minor}.{build}\\"
    if alpha and int(alpha) > 0:
        version += f\\"a{alpha}\\"
    return version


def get_requirements(requirements_filename: str):
    requirements_file = path.join(path.dirname(__file__), requirements_filename)
    with open(requirements_file, \\"r\\", encoding=\\"utf-8\\") as r:
        requirements = r.readlines()
    requirements = [r.strip() for r in requirements if r.strip() and not r.strip().startswith(\\"#\\")]
    return requirements


def find_resource_files():
    resource_base_dirs = (\\"locale\\", \\"intents\\", \\"dialog\\", \\"vocab\\", \\"regex\\", \\"ui\\")
    package_data = [\\"*.json\\"]
    for res in resource_base_dirs:
        if path.isdir(path.join(BASE_PATH, res)):
            for directory, _, files in walk(path.join(BASE_PATH, res)):
                if files:
                    package_data.append(path.join(directory.replace(BASE_PATH, \\"\\").lstrip(\\"/\\"), \\"*\\"))
    return package_data


with open(\\"README.md\\", \\"r\\") as f:
    long_description = f.read()

setup(
    name=PYPI_NAME,
    version=get_version(),
    description=\\"\\",
    long_description=long_description,
    long_description_content_type=\\"text/markdown\\",
    url=URL,
    author=\\"TODO: Add 'author' to .projenrc.json and run pj\\",
    author_email=\\"TODO: Add 'authorAddress' to .projenrc.json and run pj\\",
    license=\\"# TODO: Add 'license' to .projenrc.json and run pj\\",
    package_dir={plugin_PKG: \\"src\\"},
    package_data={plugin_PKG: find_resource_files()},
    packages=[plugin_PKG],
    include_package_data=True,
    install_requires=get_requirements(\\"requirements.txt\\"),
    keywords=\\"ovos plugin voice assistant\\",
    entry_points={\\"ovos.plugin.phal\\": PLUGIN_ENTRY_POINT},
)
",
  "src/__init__.py": "from ovos_bus_client import Message
from ovos_plugin_manager.phal import PHALPlugin


class HelloWorldPlugin(PHALPlugin):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.bus.on(\\"mycroft.ready\\", self.on_mycroft_ready)

    @property
    def my_setting(self):
        \\"\\"\\"Dynamically get the my_setting from the config file(s).
        Example:
        {
            \\"PHAL\\": {
                \\"ovos-phal-plugin-helloworld\\": {
                    \\"my_setting\\": \\"my_value\\"
                }
            }
        }
        If it doesn't exist, return the default value.
        \\"\\"\\"
        return self.config.get(\\"my_setting\\", \\"default_value\\")

    def on_mycroft_ready(self, message: Message):
        \\"\\"\\"Take action when OVOS is ready.\\"\\"\\"
        self.log.info(\\"OVOS reported ready, now I can do something!\\")
        # Implement something here
",
  "src/version.py": "VERSION_MAJOR = 0
VERSION_MINOR = 0
VERSION_BUILD = 1
VERSION_ALPHA = 0",
  "version.py": "VERSION_MAJOR = 0
VERSION_MINOR = 0
VERSION_BUILD = 1
VERSION_ALPHA = 0",
}
`;
